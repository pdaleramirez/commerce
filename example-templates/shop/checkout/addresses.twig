{% extends 'shop/_layouts/main' %}

{% set addresses = craft.commerce.customers.customer.addresses %}

{% block main %}
<!-- Template: {{ _self }}.twig -->
    <div class="flex -mx-8">
        <div class="w-2/3 px-8">
            <h1 class="text-xl font-bold">Where should we send your order?</h1>

            <div class="mt-6">

              <form method="post" action="">
                  <input type="hidden" name="action" value="commerce/cart/update-cart">
                  {{ redirectInput('shop/checkout/shipping') }}
                  {{ csrfInput() }}

                  {% if not cart.email %}
                      <label for="email">Email</label>
                      <input id="email" class="w-full" type="email" value="{{ cart.email }}" name="email"
                             placeholder="email@site.com"/>

                      <span class="flash">{{ cart.getErrors('email')|join }}</span><br>
                  {% endif %}

                  {% include 'shop/_includes/addresses/fieldset' with {
                      title: "Shipping Address",
                      class: 'ShippingAddress',
                      name: 'shippingAddress'
                  } %}

                  <input type="hidden" name="billingAddressSameAsShipping" value="0">

                  <div class="mt-3">
                    <label for="billingAddressSameAsShipping">
                      <input id="billingAddressSameAsShipping" name="billingAddressSameAsShipping" type="checkbox" checked="checked"/>
                      <span class="label-body">Use same address for billing</span>
                    </label>
                  </div>

                  <div class="mt-3">
                    <label for="makePrimaryShippingAddress">
                      <input id="makePrimaryShippingAddress" name="makePrimaryShippingAddress" type="checkbox"/>
                      <span class="label-body">Make this the primary shipping address</span>
                    </label>
                  </div>

                  <div class="mt-3">
                    {% include 'shop/_includes/addresses/fieldset' with {
                        title: "Billing Address",
                        class: 'BillingAddress hidden',
                        name: 'billingAddress'
                    } %}
                  </div>

                  <div class="mt-3">
                    <label for="makePrimaryBillingAddress">
                      <input id="makePrimaryBillingAddress" name="makePrimaryBillingAddress" type="checkbox"/>
                      <span class="label-body">Make this the primary billing address</span>
                    </label>
                  </div>

                  <div class="mt-3 flex justify-end">
                    <input type="submit" class="{{ classes.btn.base ~ ' ' ~ classes.btn.blue }}" value="Confirm addresses">
                  </div>
              </form>
            </div>
        </div>

        <div class="w-1/3 pr-8">
            {% include "shop/checkout/_includes/order-summary" %}
        </div>
    </div>

    {% js %}
      var $fieldsets = document.querySelectorAll('.js-address-fieldset');

      if ($fieldsets && $fieldsets.length) {
        $fieldsets.forEach(function (el) {
            var $addressSelects = el.querySelectorAll('.js-address-select');

            if ($addressSelects && $addressSelects.length) {
                $addressSelects.forEach(function(el) {
                    var $radio = el.querySelector('.js-radio input');
                    var $body = el.querySelector('.js-body');

                    if ($radio) {
                        if ($body) {
                            // Creating new address
                            $radio.addEventListener('change', function(ev) {
                                if (ev.target.checked) {
                                  $body.classList.remove('hidden');
                                } else {
                                  $body.classList.add('hidden');
                                }
                            });

                            if ($radio.checked) {
                                $body.classList.remove('hidden');
                            }
                        } else {
                            // Selecting existing address
                            $radio.addEventListener('change', function(ev) {
                                if (ev.target.checked) {
                                    var $newBox = document.querySelector('.js-address-select[data-model-name="' + ev.target.dataset.modelName + '"]');
                                    if ($newBox) {
                                        $newBox.querySelector('.js-body').classList.add('hidden');
                                    }
                                }
                            });
                        }
                    }
                });
            }
        });
      }

      var $billingSameAs = document.querySelector('#billingAddressSameAsShipping');
      if ($billingSameAs) {
          $billingSameAs.addEventListener('change', function(ev) {
              var $billingFieldSet = document.querySelector('.js-address-fieldset.BillingAddress');
              $billingFieldSet.classList.toggle('hidden');
          });

          {% if (cart.billingAddressId and cart.billingAddress.hasErrors()) or (cart.billingAddressId != cart.shippingAddressId) %}
          $billingSameAs.click();
          {% endif %}
      }
    {% endjs %}

{% endblock %}
